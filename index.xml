<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Madiks&#39;s blog</title>
    <link>https://madiks.github.io/</link>
    <description>Recent content on Madiks&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved.&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Wed, 27 Sep 2017 21:22:14 +0800</lastBuildDate>
    
	<atom:link href="https://madiks.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从零搭建LNMP开发环境</title>
      <link>https://madiks.github.io/post/build-vagrant-lnmp-sde/</link>
      <pubDate>Wed, 27 Sep 2017 21:22:14 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/build-vagrant-lnmp-sde/</guid>
      <description>在Mac从零搭建PHP7开发环境，由于我不想直接在本地环境下直接操作所以使用Vagrant+VirtualBox在虚拟机来搭建开发环境，这样可以不用考虑开发环境各种配置对于本机的影响。
关于Vagrant可以参考这两篇文章：为什么要使用Vagrant和Vagrant使用简介我就不多做解释了。
如果你不想自己手动搭建整个环境可以直接使用Laravel Homestead，这是由Laravel框架开发者提供的一个已搭建好的跨平台（Windows、 Mac、 Linux）的PHP开发环境，内置了如Nginx、PHP7、 MySQL、 Postgres、 Redis、 Memcached、 Node等服务，只需在Vagrant下载入box文件做到了开箱即用。
绕了半天还是回归正题，从零搭建PHP7开发环境：
初始化虚拟环境 这里假设你已经在本机安装好了VirtualBox+Vagrant，进入自己的想要存放环境的目录并在终端下执行如下命令：
mkdir trusty64 &amp;amp;&amp;amp; cd trusty64 # 创建并进入存放虚拟机的目录 vagrant init ubuntu/trusty64 # 使用Vagrant载入Ubuntu 14.04的box文件  上面的命令会从外网下载Ubuntu 14.04的box文件，所以会比较慢，需要耐心等待。执行成功后编辑trusty64目录下的Vagrantfile配置文件来修改一些虚拟机的配置。
由于网络原因box文件的下载可能出错，所以我这里提供我已下载的Vagrant Ubuntu 14.04 Box文件给大家，可以直接在trusty64目录下使用如下命令载入:
vagrant box add phpdev ubuntu-trusty64-20170831.box vagrant init  调整虚拟机配置 我习惯将配置文件中config.vm.box_check_update = true修改为config.vm.box_check_update = false，这样每次启动虚拟机就不会检查box文件是否有更新了。
Vagrant 默认是使用端口映射方式将虚拟机的端口映射本地从而实现类似 http://localhost:80 这种访问方式，我更喜欢以固定IP的方式访问虚拟机，修改配置：
config.vm.network :private_network, ip: &amp;quot;192.168.99.64&amp;quot;  这样启动虚拟机后我们就能用 192.168.99.64 访问这台机器了，你可以把IP改成其他地址，只要冲突就行。
默认Vagrant是把当前目录即trusty64映射到虚拟机的/vagrant目录下，你可以改变这个配置：
config.vm.synced_folder &#39;.&#39;, &#39;/vagrant&#39;, disabled: true config.vm.synced_folder &amp;quot;./PHPCode&amp;quot; , &amp;quot;/code&amp;quot;, :mount_options =&amp;gt; [&amp;quot;dmode=777&amp;quot;, &amp;quot;fmode=666&amp;quot;]  上面第一行关闭默认的目录映射，第二行将当前目录下的PHPCode映射到虚拟机的/code目录下。</description>
    </item>
    
    <item>
      <title>记一次奇葩的面试经历</title>
      <link>https://madiks.github.io/post/a-bizarre-job-interview/</link>
      <pubDate>Thu, 07 Sep 2017 16:30:23 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/a-bizarre-job-interview/</guid>
      <description>今天下午去某公司面试PHP岗位，经历比较奇葩，现将经历记录如下：
前天下午这家公司hr给我打电话说你通过了我们的简历筛选，问我什么时候有空过去面试，于是就约了后天下午两点半的面试。
今天下午两点二十我到了该公司，先从前台那领到了一张需要填写个人信息的表格，找了个地开始填表。把这张表摆在桌面上细一瞧，好家伙各种项目是列的事无巨细。从个人姓名、性别、身份证号、出生年月、籍贯、民族、政治面貌到手机号、邮箱、QQ号码、备用联系人、教育经历、获奖情况、工作年限、工作经历、上一份工作薪酬、薪酬证明人联系方式再到家庭成员关心、你爸你妈叫啥、父母年龄和工作等等信息。我自己都有点搞不清楚自己是来应聘后端程序员还是来参加政府的公务员考试的，好不容易花十多分钟填好交上去，然后等着面试。
我没带简历，得等hr打出简历来才能继续面试。等了大概二十来分钟，hr带着简历来了，面试开始，我跟hr的对话如下：
 hr：不好意思让您久等了，咱们开始吧。 我：好。 hr：你是陕西人？ 我：对，陕西·西安的。 hr：工作三年了？ 我：对，14年毕业的，刚好工作三年多。 hr：上份工作是校招还是社招的？ 我：我在外地上的大学，毕业以后来北京自己找的工作。 hr：那介绍一下你的项目经历吧。 我：咱这是开始技术面试了吗？ hr：没有，现在是hr面。 我：哦，开始介绍项目经历，此处省略许多字。 hr：都用过什么PHP框架？ 我：上架公司的项目用的是zend framework还有不用框架的项目，我自己还用过CI和laravel。 hr：没用过TP？ 我：没用过，但是我感觉框架很快就能掌握所以没用过并不是问题。 hr：……，那你上家公司项目都用什么数据库？ 我：Oracle，因为性能较好，能满足我们公司的业务量，后端业务逻辑不用太复杂。 hr：你们没用MySQL？ 我：（尴尬），没用，不过我对MySQL也有一些了解。 hr：那你有做管理系统和电商系统的经验吗？ 我：管理系统有，电商系统暂时没接触过。 hr：……，介绍一下这个项目（指着简历一个项目）。 我：这是我单独负责的一个爬虫项目，当时老大要抓取几个不同网站上的数据。我使用python Scrapy爬虫框架写的，抓取网页数据、整理、过滤、入库，另外的前端展示系统由其他同事负责，这项目其实比较简单。 hr：python写的（简历上写的python实现）？ 我：对，是用python写的。 hr：（少做停顿），我大概了解了你的情况。我们们公司在薪酬方面还是还是不错的，只要技术能力够薪资可以给到很高。 我：（点头）。 hr：现在我们公司PHP这边要招两个初级和一个高级职位，部分后端改java了，所以PHP的职位数量有些压缩。 我：……（不详的预感）。 hr：高级PHP岗位是要求能独立设计项目，还要带小团队做需求。你这边三年经验虽然也能满足，但是我觉得你没有电商项目相关经验，可能不适合我们。所以不好意思，麻烦你跑一趟，祝你找到更好的公司。 我：…… 我：…… 我：……，那好，再见。  整个过程不到二十分钟，还没我这等面试的时间久。连对方技术的面都没见着，我就被hr否了，感觉mmp。来回折腾三小时，您这是通知我过来现场筛选简历吧，越想越生气。我就给hr回了邮件：
 希望你们写好招聘要求，做好简历筛选。技术都没面，被hr以工作经验不符拒绝，我大热天白跑一趟真的很烦。
 本来一肚子火，我在写邮件时还是保持了相当的克制。冷静下来觉得今天碰到这事有些搞笑，写点东西记录下来吧。</description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://madiks.github.io/resume/</link>
      <pubDate>Sun, 23 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://madiks.github.io/resume/</guid>
      <description>个人简历 联系方式  手机：18513780637 邮箱：madiks@163.com  个人信息  马迪/男／1991 学历：本科（2010-2014） 籍贯：陕西·西安 民族：汉 工作经验：3年 期望城市：北京 Github：https://github.com/madiks Blog：https://madiks.github.io  技能清单  PHP，熟练掌握，了解底层实现，工作中主要使用语言，熟悉LNMP体系 Golang，熟悉，写过一些工具类应用 Python，熟悉，写过scrapy爬虫，简单的spark数据处理程序还有一些脚本程序 Javascript／Node，熟悉，写过一些前端项目和简单的游戏 Redis，熟悉，工作中常用做缓存、队列、计数、加锁，MongoDB简单了解，用过 Oracle／MySQL，熟悉，sql语句性能分析与优化 HTML/CSS，熟悉，可搭建简单的项目，比较倾向于使用现成的前端框架和组件，自己缺乏设计感 lua／openresty，了解，写过简单的项目  工作经历 爱阅读（北京）科技有限公司（2014.07-至今）
 统计项目  实时统计公司各平台的访问、收入、下载等业务数据，基于MapReduce思想采用php多进程模型分维度统计计算，我负责添加新统计类型、维护和优化整个系统，并尝试使用Node重构整个计算程序。
 中心书库项目  涉及所有图书的抓取、管理、推送，定义了图书的标准XML结构，将版权方提供的内容需格式化成标准格式，由统一的接口入库。我负责新授权方的接入工作，处理图书抓取问题并对整个系统进行改进和优化。
 用户行为日志跟踪项目  根据用户id实时提取用户的操作日志在前端界面做展示，用于用户分析和调试。我负责设计和实现整个项目，使用redis zset以用户操作的时间戳为score存储单个用户的所有日志，用另外一个zset以添加跟踪用户id的时间戳为score存储所有跟踪用户列表。日志处理进程对比跟踪列表的用户id往对应的zset中写入用户日志，另一个进程使用LRU原则，根据用户列表的对应时间戳删除旧的跟踪用户及其日志zset回收内存。前端使用ajax轮询实时更新日志，并还原上次轮询前的用户的使用状态。
 图书授权项目  书库的书籍授权到第三方，负责整个系统设计，针对不同的合作方编写接口，有的授权方需要主动推送内容而nginx的超时重试会导致多个fpm进程同时向对方接口添加图书，为进程简单加锁解决并发问题。
 数据抓取项目  使用Python scrapy框架编写爬虫抓取第三方站点数据同步至入库接口。
 检测图书更新项目  因某合作方授权图书太多原有的PHP脚本太慢，使用Golang编写新的检测程序利用其异步IO和并发特性增加API请求并发数，提升网络访问效率和检测效率。
工作感悟  英语非常重要，较好的英文水平有助于更快更好地学习新东西还能躲过很多翻译不良带来的陷阱 程序员最重要的是抽象能力和学习能力，不把自己局限在某一领域 代码是写给人看的，在任何时候代码的整洁性和可读性都是非常重要的 在工作中有什么想法或者收获一定要写下来，写作是思维的沉淀的，将心中抽象的概念化为实体,进而可以更全面的观察，发现自己思维的不足，获得进步  致谢 感谢您花时间阅读我的简历，期待能有机会和您共事。</description>
    </item>
    
    <item>
      <title>摄影知识笔记</title>
      <link>https://madiks.github.io/post/photography-note/</link>
      <pubDate>Wed, 28 Jun 2017 21:12:13 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/photography-note/</guid>
      <description>摄影知识笔记 镜头 Lenses  焦距  代表从镜头的光学中心到相机图像传感器的距离。焦距越小，镜头视角越广；焦距越大，相机取景框中呈现的物体越大。
 透视  焦距越小，镜头前近物和远物的距离越大。反之亦然。这种效果造成了远处景物变模糊。
镜头种类：
 人像镜头 60-135mm  特点是亮度好，软图像能掩盖皮肤缺陷并且能够使拍摄的物体从模糊的背景中突出显示。
 广角镜头 14-35mm  镜头涵盖的画面空间大，非常适合风景和新闻报道。鱼眼镜头是一种接近180度的广角镜头，可使画面扭曲非常像桶装。
曝光 Exposure 一定时间内到达相机传感器的光的量。
曝光主要基于三个要素：光圈、快门速度、传感器的感光灵敏度ISO。
 光圈  是指镜头膜片的开口，光通过它进入相机。光圈越大，到达传感器的光越大，照片越亮。 光圈以分数的值来表示入f/2，相机中f经常被省略由简单的数字F2给出。请记住数字值约小，光圈越大。
 快门速度  是指光到达图像传感器所用的时间长度。速度越快，到达传感器的光越少。
 感光度 ISO  一般来说，ISO越高，光传感器就越敏感，图片也越亮。通常情况下ISO值最好低一点（约400），因为较高的敏感度会使图片上出现恼人的“噪点”。
在不同的外界光照环境下，通过控制这三个参数来控制画面的明暗程度。不同的搭配将会获得不同的效果，这需要自己多实践、体会。
运动模糊 快门速度不仅影响曝光，而且影响视野范围内移动对象的模糊程度。快门时间越短，捕捉图像的时间就越短，得到的帧就越轻快。反之亦然。
拍摄动态场景的关键因素，曝光时间。另外长时间曝光最好使用三脚架，较少相机运动对画面的影响。
景深 DOF Depth of Field 是指出现于清晰聚焦空间的前后边界之间的距离。景深就是物体最为清晰的拍摄区域。
通常情况下，镜头会有一个“调焦圈”，可以用它来调节这个区域在画面的位置。景深取决于光圈的大小，光圈越大，景深越小，背景越模糊。反之亦然。
白平衡 White Balance 人脑会将看到的颜色纠正为“正常”的颜色，相机也提供这种自动纠错功能，前提是你告诉它拍摄时的光线类型。色彩纠错功能。
色温值（Temperature）从1000-8000K由红（暖）变蓝（冷）。白织灯大约具有2500K的色温，略泛黄。阴影的色温7000K，颜色偏蓝。
设置相机的色温值即是设置光源的色温。对于照片的彩色具有相反作用。
光源 为光源定位和使用光源一样重要。不同位置的灯光能够以不同方式在模特和室内场景之间分配灯光。
 主光流  目的是创建主光效果，通过在照片内分配被照亮的点和阴影来进行强调。
 辅光  由于主光常常会产生大量的硬阴影和软阴影，辅光的作用就是为了“补充”这些阴影区域。
 边缘光  边缘光从后面照亮模特，突显出她的整个或部分轮廓。可以突出照片主题并使其更加丰盈。</description>
    </item>
    
    <item>
      <title>外部世界如何认识你</title>
      <link>https://madiks.github.io/post/how-world-know-you/</link>
      <pubDate>Mon, 26 Jun 2017 22:32:33 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/how-world-know-you/</guid>
      <description>世界与别人如何了解你 一些整天在接触甚至整天在使用但却被忽视的东西。
your action is how the world reflect you.
别人与世界对你的认识是建立在你所做的事和你的行动上的，是从特定视角观察来的。你内在的很多东西不表现出来是毫无用处的，是不能为人所知的，无法让你认识你的。
所以，其实内向的人朋友少不是没有原因的：别人都没机会与你接触，也不能从你的行为来认识你，自然是没办法交朋友的。尝试开放一些，与人多交流，给别人认识你的机会。
how the world know you is depend on what you have done and how you act yourself.</description>
    </item>
    
    <item>
      <title>对于学习的理解</title>
      <link>https://madiks.github.io/post/about-learn/</link>
      <pubDate>Mon, 22 May 2017 23:32:11 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/about-learn/</guid>
      <description> 对于学习的理解 刚读了一篇谈论学习英语方法的文章，里面介绍学习英语要在有一定基础下不断实践，小孩子牙牙学语时会的词不多但是他们面对这个新奇的世界充满好奇心，不断摸索不断实践所以成长迅速。而我们大多数人学了十几年英语反而实践的部分不如小孩子多，因而难有成效。
于是我翻字典查了一下“学习”这个词的的含义：
 学习：通过阅读、听讲、研究、实践等获得知识或技能的过程。
 汉语果然博大精深，仔细理解之下发现：学和习是不同的两个过程，要分开看待，同时做到这两者才能称之为学习。我一直以来都只是埋头读书，缺乏反复练习与使用，可以说是有学无习，难怪学完就忘，没有成效。
人的认知规律是：从感性到理性，从具体到抽象，理论必须在实践中才能真正学好。而在读书时选择适合自己当前水平的书读，阅读科普书籍入门、通过学习专业教材掌握基础、通过技术书籍深入特定领域。
想了一下总结出来一个学习循环♻️
 define what to learn search,read,understand practice with real problems collect feedback, find out the missing parts  </description>
    </item>
    
    <item>
      <title>Golang学习笔记</title>
      <link>https://madiks.github.io/post/golang-learn-note/</link>
      <pubDate>Wed, 03 May 2017 15:10:47 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/golang-learn-note/</guid>
      <description>Introduction 阅读雨痕大神的《Go语言学习笔记》对自己知识查漏补缺做的笔记。
类型 Type 变量（variable）是一段或者多段用来存储数据的内存，类型决定了变量内存的长度和存储格式。
常量（constant）表示运行时恒定不可改变的值，使用常量的主要目的有：
 用一个易于阅读和理解的标识符来代替程序中的“魔法数字” 在需要调整常量值的时候，无需修改所有引用代码  Go语言变量类型分为值类型和引用类型，Golang引用类型（reference type）特指slice、map、channel这三种预定义类型。
内置函数new按指定类型长度分配零值内存，返回指针。并不关心类型的内部构造和初始化方式。而引用类型则必须使用make函数创建，编译器会将make转换为目标类型专用的创建函数（或指令），以确保完成全部内存分配和相关属性的初始化。
当然new函数也可以为引用类型分配内存，但这是不完整创建。以字典（dict）为例，new仅仅分配了字典类型本身（实际就是一个指针包装）所需内存，并没有分配键值对的存储内存，没有初始化散列桶的内部属性，因此它无法正常工作。
自增、自减不再是运算符。只能作为独立语句，不能用于表达式。
指针（pointer）与内存地址是不同的，内存地址是内存中每个字节单元的唯一编号，而指针则是一个实体。指针会分配内存空间，相当于一个专门用来保存地址的整型变量。
函数 Function 函数：结构化编程的最小模块单元。
 逻辑划分、抽象、任务分解 代码复用 方便测试  函数调用前，会为形参和返回值分配内存空间，并将实参拷贝至形参的内存。
闭包（closure）是在其词法上下文引用了自由变量的函数，或者说是函数和其引用的环境的组合体。正因为闭包通过指针引用环境中的变量，那么可能导致其生命周期延长，甚至被分配到堆内存。
数据 Data 字符串是不可变字节（byte）序列，其本身是一个复合结构。
type stringStruct struct { str unsafe.Pointer len int }  动态构建字符串容易引起性能问题，因为字符串是不可变字节（byte）序列，在用加法操作法拼接字符串时，每次都须重新分配内存。改进思路是预分配足够的内存。可以使用strings.Join函数或者使用bytes.Buffer与分配内存空间。
切片（slice）本身并非动态数组或数组指针。它内部通过指针引用底层数组，设定相关属性将数据读写操作限定在制定区域内。切片本身只是一个只读对象，其工作机制类似于数组指针的一种包装。
type slice struct { array unsafe.Pointer len int cap int }  字典（Dict）是无须键值对集合，是迭代安全的，不是并发安全的。
结构体（struct）将多个不同类型的命名字段（field）序列打包成一个复合类型。
方法 Method 方法是与对象实例绑定的特殊函数。receiver的类型可以是基础类型或者指针类型，主要关系到调用对象时对象实例是否会被复制。
receiver类型的选择：
 大对象建议用*T，以减少复制成本。 引用类型、字符串、函数等指针包装对象，直接用T 若包含Mutex等同步字段，用*T，避免因复制造成的锁失效。  接口 Interface 接口代表一种调用契约，是多个方法声明的集合。
并发 Concurrency 关键字go创建一个并发任务单元。新建任务被放置在系统队列中，等待调度器安排合适的系统线程去执行。</description>
    </item>
    
    <item>
      <title>人生的环境论</title>
      <link>https://madiks.github.io/post/about-atmosphere/</link>
      <pubDate>Sun, 02 Apr 2017 22:52:33 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/about-atmosphere/</guid>
      <description>人生的环境论 在职业生涯中有很多因素影响自己的前进与发展，像环境、运气、机遇等超出个人控制的因素太多，想要提升个人的发展只能从可控因素下手，即做好自身相关的方面，如技术实力、解决问题的能力、做事的态度等等。
我觉得个人自身自身与外界就像两个环境系统，一大一小，这俩者既有联系（大环境的变化很容易影响小环境）又有隔离（小环境的变化很难反馈到大环境或者说这种影响对大环境来说太渺小了），一个人能否成功由这两个环境系统共同决定。而个人可控的只有自我这个小环境，所以做好自己，“但行好事”才是人生成长的关键。
我现在还说不好工作到底为了什么，但是工作态度已经比较明晰了：做事、做成事、解决问题。但行好事，亦问前程。</description>
    </item>
    
    <item>
      <title>数据库与sql优化</title>
      <link>https://madiks.github.io/post/sql-optimize/</link>
      <pubDate>Sat, 26 Nov 2016 23:12:13 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/sql-optimize/</guid>
      <description>PDO PDO提供一个数据访问的抽象层，意味着不管使用哪种数据库都可以用同样的一组API对数据进行操作，保证了可抽象性和访问接口的一致性。
PDO提供了参数绑定和预编译的特性，参数绑定：数据过滤和安全，预编译：转义和软解析提速。
事务 特性：原子性、一致性、独立性、持久性。MySQL中开启事务需要DB引擎的支持，如InnoDb.
数据库优化 分为两部分：sql语句优化和数据库服务器配置优化。
sql语句优化：
 避免在列上进行运算，这样会导致索引实效。
 join时应该用小结果集驱动大结果集。同时把复杂的join查询查分成多个query。因为join多个表时，可能导致更多的锁定和堵塞。
 like模糊查询时注意避免使用%%。
 仅列出需要的字段对查询速度不会有明显影响，主要考虑节省内存。
 使用批量插入语句节省交互，
 limit基数较大时使用between（只在id是连续的情况下有效）。
 不要使用rand函数获取多条随机记录，建议先使用程序生成好随机数。
 避免使用NULL
 不要使用count(id)，使用count(*)/count(1)
 尽可能在索引中完成排序。
 使用执行计划（EXPLAIN）分析优化sql语句。
  MySQL的索引类型 索引是一种特殊的文件(InnoDB数据表上的索引是表空间的一个组成部分)，它们包含着对数据表里所有记录的引用指针。
 B-Tree索引  在B树中，内部（非叶子）节点可以拥有可变数量的子节点（数量范围预先定义好）。当数据被插入或从一个节点中移除，它的子节点数量发生变化。为了维持在预先设定的数量范围内，内部节点可能会被连结或者分离。因为子节点数量有一定的允许范围，所以B树不需要像其他自平衡查找树那样频繁地重新保持平衡，但是由于节点没有被完全填充，可能浪费了一些空间。子节点数量的上界和下界依特定的实现而设置。例如，在一个2-3 B树（通常简称2-3树），每一个内部节点只能有2或3个子节点。
在Ｂ+树，这些键值的拷贝被存储在内部节点；键值和记录存储在叶子节点；另外，一个叶子节点可以包含一个指针，指向另一个叶子节点以加速顺序存取。
最常见的索引类型，基于B-Tree数据结构。B-Tree的基本思想是，所有值（被索引的列）都是排过序的，每个叶节点到跟节点距离相等。所以B-Tree适合用来查找某一范围内的数据，而且可以直接支持数据排序（ORDER BY）。但是当索引多列时，列的顺序特别重要，需要格外注意。InnoDB和MyISAM都支持B-Tree索引。InnoDB用的是一个变种B+Tree，而MyISAM为了节省空间对索引进行了压缩，从而牺牲了性能。
 Hash索引  基于hash表。所以这种索引只支持精确查找，不支持范围查找，不支持排序。这意味着范围查找或ORDER BY都要依赖server层的额外工作。目前只有Memory引擎支持显式的hash索引（但是它的hash是nonunique的，冲突太多时也会影响查找性能）。Memory引擎默认的索引类型即是Hash索引，虽然它也支持B-Tree索引。
 Full-text索引  主要用来查找文本中的关键字，而不是直接与索引中的值相比较。Full-text索引跟其它索引大不相同，它更像是一个搜索引擎，而不是简单的WHERE语句的参数匹配。你可以对某列分别进行full-text索引和B-Tree索引，两者互不冲突。Full-text索引配合MATCH AGAINST操作使用，而不是一般的WHERE语句加LIKE。可以在char、varchar或text类型的列上创建。
字段类型  CHAR——字符。固定长度的字串，在右边补齐空格，达到指定的长度。支持从0到155个字符。搜索值时，后缀的空格将被删除。 VARCHAR——可变长的字符。一个可变长度的字串，其中的后缀空格在存储值时被删除。支持从0到255字符 TINYBLOB——微小的二进制对象。支持255个字符。需要长度+1字节的存储。与TINYTEXT一样，只不过搜索时是区分大小写的。(0.25KB) TINYTEXT——支持255个字符。要求长度+1字节的存储。与TINYBLOB一样，只不过搜索时会忽略大小写。(0.25KB) BLOB——二进制对象。支持65535个字符。需要长度+2字节的存储。 (64KB) TEXT——支持65535个字符。要求长度+2字节的存储。 (64KB)  CHAR 类型的一个变体是 VARCHAR 类型。它是一种可变长度的字符串类型，并且也必须带有一个范围在 0-255 之间的指示器。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://madiks.github.io/about/</link>
      <pubDate>Sat, 23 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://madiks.github.io/about/</guid>
      <description>关于我 91年出生的程序员，喜欢看书、美剧、电影和画画（水平不高但也算一兴趣），有时看得东西多了也想写一写自己不成熟的想法，微博@Adiks。
- updated at 2017年9月3日</description>
    </item>
    
    <item>
      <title>PHP面向对象笔记</title>
      <link>https://madiks.github.io/post/php-oop-note/</link>
      <pubDate>Mon, 23 May 2016 20:12:23 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-oop-note/</guid>
      <description>Introduction 阅读《PHP核心技术与最佳实践》对PHP面向对象相关知识的总结、整理与记录。
面向对象 OOP 面向对象程序设计（Object-Oriented Programming，OOP）是一种程序设计范性，同时也是一种程序开发方法。它将对象作为程序的基本单元，将程序和数据封装其中，以提代码的重用性、灵活性和可扩展性。
面向对象的核心思想是对象、封装、可重用和可扩展性。
面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想（面向过程）刚好相反：传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。
通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式。
类是对象的抽象组织，对象是类的具体存在。
PHP对象的本质 先看PHP5中变量的定义：
#zend/zend.h typedef union _zvalue_value { long lval; //整形 double dval; //浮点数 struct { char *val; int len; } str; //字符串 HashTable *ht; //数组 zend_object_value obj; //对象 } zvalue_value; struct _zval_struct { /* Variable information */ zvalue_value value;	/* value */ zend_uint refcount__gc; zend_uchar type;	/* active type */ zend_uchar is_ref__gc; };  从源码可知php对象的类型是zend_object_value，接下来看它是如何实现的：
#zend/zend.h typedef struct _zend_object { zend_class_entry *ce; //类指针，指向对象对应的类 HashTable *properties; //存放对象的属性表 HashTable *guards; /* protects from __get/__set .</description>
    </item>
    
    <item>
      <title>希望始于今天</title>
      <link>https://madiks.github.io/post/hope-start-today/</link>
      <pubDate>Sat, 17 Jan 2015 10:32:11 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/hope-start-today/</guid>
      <description>在简书上看到了一篇文章作者在文字里充满了对于现在的不满，觉得是自己过去的几年毫无作为、虚度青春造成了自己当前窘境。从文字中我能感觉到浓浓的抑郁、很压抑，我也有过这样的感觉，所以我决定劝劝他。可我从来都不是一个擅长安慰人的人，大概也就只能写写自己的经历然后跟他说，看我比你惨，别这么负面和消沉了。于是有了下面这些文字：
回顾高中大学的七年，高考失败不好意思回学校见老师，大学什么都没干玩了四年游戏，校招失败。不过命运对我还是不错的，不管什么时候它都没将我逼得无路可走。我还是自己找到了一份工作，我还有很多计划和理想，其中比较现实的的一个就是出国移民。
工作之后发现自己缺乏各方面的能力，从专业的基础知识，工作技能到与人沟通、交流。我现在不说自己内向了，它只是一个借口，让我变得更加自闭，情绪易波动， 懒散，没有推动力什么都不想做。虽然做着天天在与电脑打交道的工作，但我发现我不能在电脑前安静的阅读，极易分心。我现在不想老去反思自己有多失败，刚刚过去的大学四年就是对我最好的教训，当时我天天在想自己为什么这么失败，未来在哪，如果没有xx会怎么样，从这些中我除了悲伤，忧虑等负面情绪其他什么都没有得到。处于这种状态中没办法做好任何一件事，大学四年我只得到了一个比高中更坏的结果。 在工作的最初一段时间里我只期待着周末，工作日的每一天对我来说都是格外的痛苦，终于等到了周末我发现我还是感觉不到丝毫的快乐，只是对着电脑一次又一次的刷新网页，然后又期待下一个周末。我想为什么会这样，高中毕业后的我期待着大学会更好，大学时的我期待着毕业了会更好，现在毕业了我期待着明天会更好，可是明天是哪一天。想了很久我发现一直以来我都忽视今天忽视现在，我后悔的昨天曾经是我的今天，我期待的明天也将是我的今天。所以我不去想那么多了，过好今天。我现在上班挤地铁的时候会背单词，下班的时候会听英语，接受工作中的一切后发现有时候工作也还是挺有意思的。周末有时候会出去参加一下活动或者跟几个朋友吃个饭聊聊天，睡个懒觉 ，跟几个异地的朋友一起开个黑玩游戏互相嘲讽一下对方。买了一堆书，每天十几页或者几十页，不知道15年能看完几本。外部的环境没有什么改变，但我轻松了很多。过好今天，将会有一个更好的今天，我的计划列表上有很多的事，我相
今天是一个周末，我睡了一个懒觉，十点多拿起手机看到简书推送的这篇文章时，突然想写一下自己，希望对你有用。</description>
    </item>
    
    <item>
      <title>php自定义Warning的输出信息</title>
      <link>https://madiks.github.io/post/php-custom-warning-message/</link>
      <pubDate>Tue, 30 Dec 2014 21:10:40 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-custom-warning-message/</guid>
      <description>php自定义Warning的输出信息 前几天公司平台接入了新的合作商，数据抓取服务一直没问题，到今天有一本书一直报错，查看log发现Warning,出错是由于导致xml解析错误。想到输出一下具体的bookid和chapter_id来查看到底是哪本书哪个章节的问题。
直接想到的方案是try catch在出错的时候输出bookid和chapter_id,但是发现php try catch无法处理Warning错误，于是Google了php如何catch warning，在stackoverflow上找到了如下方法： http://stackoverflow.com/questions/1241728/can-i-try-catch-a-warning
大致是通过 set_error_handler来自定义处理Warning的方法，在其中抛出一个异常然后再try catch它输出bookid和chapter_id，基本照抄给的实例于是如下的代码：
set_error_handler(function($errno, $errstr, $errfile, $errline, array $errcontext) { // error was suppressed with the @-operator if (0 === error_reporting()) { return false; } throw new ErrorException($errstr, 0, $errno, $errfile, $errline); }, E_WARNING); try{ $chapter_content = simplexml_load_string($chaptercontent_xml); } catch (Exception $e) { echo &amp;quot;Caught exception: bookid = $id , chapter_id = $chapter_id &amp;quot;, $e-&amp;gt;getMessage(), &amp;quot;\n&amp;quot;; exit(); } restore_error_handler();  解释：使用set_error_handler来接管warning的处理，在其回调函数中抛出一个Exception,然后就可以try catch了，最后调用restore_error_handler();来撤销你设置的error_handler从而使其不影响后续的代码。</description>
    </item>
    
    <item>
      <title>我在创业团队实习收获</title>
      <link>https://madiks.github.io/post/internship-at-startups/</link>
      <pubDate>Sat, 22 Mar 2014 21:12:41 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/internship-at-startups/</guid>
      <description>我在创业团队实习收获 去年12月到今年3月初在一本地软件公司进行PHP实习，分到该公司的创业部门。为什么说是创业部门呢，原来该公司主要从事政府部门的软件、网站的设计，可能是老总想要发展新的赢利点吧，于是公司就成立了一个创业部门发展新业务，选择的方向也是前端时间比较热门的微信公众平台的开发。
我刚进入该部门的时候，这个项目已经开始了大约一个月，然后直到今年三月初的项目失败以后博主就离开了这家公司，期间经历了比较多的事，有很多的收获。先感谢这家公司给我的实习机会，下面就开始列一列我的实习感受和一些总结，写的比较乱没有什么章法，有对有错，大家凑合看吧。
产品方面： 1.创业期间产品线不能太广，要把握核心业务，迅速建立核心业务原型，让基础（核心）业务良好运行之后再慢慢的“做加法”，在初期一定要把有限的资源用在最需要的地方。
2.不要随意切换项目，要把当前的项目完成或者彻底放弃
3.所谓创业团队(尤其是小规模创业团队)就是一定要目标明确、单一、可执行。
这就是博主离开的原因，在这个项目失败以后，我们部门又在寻找新的项目，从本地服务门户到社交、团购、问答都考虑了一遍，后来大体确定要做一个覆盖大量用户的以话题为中心的大型社交型本地社区，我也理解的不是很明白，所以表达的也不是很明白。我觉得太靠谱就选择了离开，总之祝他们好运，能够成功。
团队方面: 4.创业团队人员结构要合理，要有核心成员，团队要精简，每一个人都有用武之地
5.不空谈理想，畅想未来，或者团队文化，太假大空的东西会让人觉得不靠谱
6.在项目开发的初期，大量进行人员调整是大忌，会直接引起团队内情绪低落，对项目失去信心。所以不管是主动离职还是辞退都要尽量避免，一旦发生这种情况，要及时说明做好团队成员的心理工作。更好的方法是在团队建立的时候吸纳人员的时候，严格把控，从而避免这种情况。
编码方面： 7.一定要有注释，哪怕比较简单的结构也要留下必要的注释
以前我不太相信自己写的代码自己能读不懂，在这个项目的时候我是真遇到了，一个月前我写的代码可我就是不认识它，这个后悔啊，当时我哪怕留下一句注释都好啊。唉说多了都是泪，积累经验了。(这段其实是自己的问题，自己的代码自己不认识不是因为没加注释而是因为自己没懂，只是粗略的写完而没有去理清自己的思路加上代码的可读性差所以会造成这种情况，跟加不加注释关系不大，有良好风格的代码本身就能起到注释的作用。) 8.设计稍微复杂的功能模块一定要在纸上建立业务流程和逻辑顺序，切记想到哪写到哪，这样可能会留下一些莫名其妙的bug
这个也有体会，当时让我写的一个小模块出了些莫名其妙的bug，我去检查的时候读我写的代码，发现逻辑极其混乱，毫无章法再加上没留注释，完全搞不明白自己当时想干啥，后来直接删掉重写了，太坑了。
做项目（学习）方面： 9.把握程序的核心结构和功能来学习，掌握核心的东西，每一个项目都要总结收获</description>
    </item>
    
  </channel>
</rss>