<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oop on Madiks&#39;s blog</title>
    <link>https://madiks.github.io/tags/oop/</link>
    <description>Recent content in Oop on Madiks&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved.&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Mon, 23 May 2016 20:12:23 +0800</lastBuildDate>
    
	<atom:link href="https://madiks.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PHP面向对象笔记</title>
      <link>https://madiks.github.io/post/php-oop-note/</link>
      <pubDate>Mon, 23 May 2016 20:12:23 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-oop-note/</guid>
      <description>Introduction 阅读《PHP核心技术与最佳实践》对PHP面向对象相关知识的总结、整理与记录。
面向对象 OOP 面向对象程序设计（Object-Oriented Programming，OOP）是一种程序设计范性，同时也是一种程序开发方法。它将对象作为程序的基本单元，将程序和数据封装其中，以提代码的重用性、灵活性和可扩展性。
面向对象的核心思想是对象、封装、可重用和可扩展性。
面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想（面向过程）刚好相反：传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。
通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式。
类是对象的抽象组织，对象是类的具体存在。
PHP对象的本质 先看PHP5中变量的定义：
#zend/zend.h typedef union _zvalue_value { long lval; //整形 double dval; //浮点数 struct { char *val; int len; } str; //字符串 HashTable *ht; //数组 zend_object_value obj; //对象 } zvalue_value; struct _zval_struct { /* Variable information */ zvalue_value value;	/* value */ zend_uint refcount__gc; zend_uchar type;	/* active type */ zend_uchar is_ref__gc; };  从源码可知php对象的类型是zend_object_value，接下来看它是如何实现的：
#zend/zend.h typedef struct _zend_object { zend_class_entry *ce; //类指针，指向对象对应的类 HashTable *properties; //存放对象的属性表 HashTable *guards; /* protects from __get/__set .</description>
    </item>
    
  </channel>
</rss>