<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Note on Madiks&#39;s blog</title>
    <link>https://madiks.github.io/tags/note/</link>
    <description>Recent content in Note on Madiks&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved.&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Wed, 28 Jun 2017 21:12:13 +0800</lastBuildDate>
    
	<atom:link href="https://madiks.github.io/tags/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>摄影知识笔记</title>
      <link>https://madiks.github.io/post/photography-note/</link>
      <pubDate>Wed, 28 Jun 2017 21:12:13 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/photography-note/</guid>
      <description>摄影知识笔记 镜头 Lenses  焦距  代表从镜头的光学中心到相机图像传感器的距离。焦距越小，镜头视角越广；焦距越大，相机取景框中呈现的物体越大。
 透视  焦距越小，镜头前近物和远物的距离越大。反之亦然。这种效果造成了远处景物变模糊。
镜头种类：
 人像镜头 60-135mm  特点是亮度好，软图像能掩盖皮肤缺陷并且能够使拍摄的物体从模糊的背景中突出显示。
 广角镜头 14-35mm  镜头涵盖的画面空间大，非常适合风景和新闻报道。鱼眼镜头是一种接近180度的广角镜头，可使画面扭曲非常像桶装。
曝光 Exposure 一定时间内到达相机传感器的光的量。
曝光主要基于三个要素：光圈、快门速度、传感器的感光灵敏度ISO。
 光圈  是指镜头膜片的开口，光通过它进入相机。光圈越大，到达传感器的光越大，照片越亮。 光圈以分数的值来表示入f/2，相机中f经常被省略由简单的数字F2给出。请记住数字值约小，光圈越大。
 快门速度  是指光到达图像传感器所用的时间长度。速度越快，到达传感器的光越少。
 感光度 ISO  一般来说，ISO越高，光传感器就越敏感，图片也越亮。通常情况下ISO值最好低一点（约400），因为较高的敏感度会使图片上出现恼人的“噪点”。
在不同的外界光照环境下，通过控制这三个参数来控制画面的明暗程度。不同的搭配将会获得不同的效果，这需要自己多实践、体会。
运动模糊 快门速度不仅影响曝光，而且影响视野范围内移动对象的模糊程度。快门时间越短，捕捉图像的时间就越短，得到的帧就越轻快。反之亦然。
拍摄动态场景的关键因素，曝光时间。另外长时间曝光最好使用三脚架，较少相机运动对画面的影响。
景深 DOF Depth of Field 是指出现于清晰聚焦空间的前后边界之间的距离。景深就是物体最为清晰的拍摄区域。
通常情况下，镜头会有一个“调焦圈”，可以用它来调节这个区域在画面的位置。景深取决于光圈的大小，光圈越大，景深越小，背景越模糊。反之亦然。
白平衡 White Balance 人脑会将看到的颜色纠正为“正常”的颜色，相机也提供这种自动纠错功能，前提是你告诉它拍摄时的光线类型。色彩纠错功能。
色温值（Temperature）从1000-8000K由红（暖）变蓝（冷）。白织灯大约具有2500K的色温，略泛黄。阴影的色温7000K，颜色偏蓝。
设置相机的色温值即是设置光源的色温。对于照片的彩色具有相反作用。
光源 为光源定位和使用光源一样重要。不同位置的灯光能够以不同方式在模特和室内场景之间分配灯光。
 主光流  目的是创建主光效果，通过在照片内分配被照亮的点和阴影来进行强调。
 辅光  由于主光常常会产生大量的硬阴影和软阴影，辅光的作用就是为了“补充”这些阴影区域。
 边缘光  边缘光从后面照亮模特，突显出她的整个或部分轮廓。可以突出照片主题并使其更加丰盈。</description>
    </item>
    
    <item>
      <title>Golang学习笔记</title>
      <link>https://madiks.github.io/post/golang-learn-note/</link>
      <pubDate>Wed, 03 May 2017 15:10:47 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/golang-learn-note/</guid>
      <description>Introduction 阅读雨痕大神的《Go语言学习笔记》对自己知识查漏补缺做的笔记。
类型 Type 变量（variable）是一段或者多段用来存储数据的内存，类型决定了变量内存的长度和存储格式。
常量（constant）表示运行时恒定不可改变的值，使用常量的主要目的有：
 用一个易于阅读和理解的标识符来代替程序中的“魔法数字” 在需要调整常量值的时候，无需修改所有引用代码  Go语言变量类型分为值类型和引用类型，Golang引用类型（reference type）特指slice、map、channel这三种预定义类型。
内置函数new按指定类型长度分配零值内存，返回指针。并不关心类型的内部构造和初始化方式。而引用类型则必须使用make函数创建，编译器会将make转换为目标类型专用的创建函数（或指令），以确保完成全部内存分配和相关属性的初始化。
当然new函数也可以为引用类型分配内存，但这是不完整创建。以字典（dict）为例，new仅仅分配了字典类型本身（实际就是一个指针包装）所需内存，并没有分配键值对的存储内存，没有初始化散列桶的内部属性，因此它无法正常工作。
自增、自减不再是运算符。只能作为独立语句，不能用于表达式。
指针（pointer）与内存地址是不同的，内存地址是内存中每个字节单元的唯一编号，而指针则是一个实体。指针会分配内存空间，相当于一个专门用来保存地址的整型变量。
函数 Function 函数：结构化编程的最小模块单元。
 逻辑划分、抽象、任务分解 代码复用 方便测试  函数调用前，会为形参和返回值分配内存空间，并将实参拷贝至形参的内存。
闭包（closure）是在其词法上下文引用了自由变量的函数，或者说是函数和其引用的环境的组合体。正因为闭包通过指针引用环境中的变量，那么可能导致其生命周期延长，甚至被分配到堆内存。
数据 Data 字符串是不可变字节（byte）序列，其本身是一个复合结构。
type stringStruct struct { str unsafe.Pointer len int }  动态构建字符串容易引起性能问题，因为字符串是不可变字节（byte）序列，在用加法操作法拼接字符串时，每次都须重新分配内存。改进思路是预分配足够的内存。可以使用strings.Join函数或者使用bytes.Buffer与分配内存空间。
切片（slice）本身并非动态数组或数组指针。它内部通过指针引用底层数组，设定相关属性将数据读写操作限定在制定区域内。切片本身只是一个只读对象，其工作机制类似于数组指针的一种包装。
type slice struct { array unsafe.Pointer len int cap int }  字典（Dict）是无须键值对集合，是迭代安全的，不是并发安全的。
结构体（struct）将多个不同类型的命名字段（field）序列打包成一个复合类型。
方法 Method 方法是与对象实例绑定的特殊函数。receiver的类型可以是基础类型或者指针类型，主要关系到调用对象时对象实例是否会被复制。
receiver类型的选择：
 大对象建议用*T，以减少复制成本。 引用类型、字符串、函数等指针包装对象，直接用T 若包含Mutex等同步字段，用*T，避免因复制造成的锁失效。  接口 Interface 接口代表一种调用契约，是多个方法声明的集合。
并发 Concurrency 关键字go创建一个并发任务单元。新建任务被放置在系统队列中，等待调度器安排合适的系统线程去执行。</description>
    </item>
    
    <item>
      <title>PHP面向对象笔记</title>
      <link>https://madiks.github.io/post/php-oop-note/</link>
      <pubDate>Mon, 23 May 2016 20:12:23 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-oop-note/</guid>
      <description>Introduction 阅读《PHP核心技术与最佳实践》对PHP面向对象相关知识的总结、整理与记录。
面向对象 OOP 面向对象程序设计（Object-Oriented Programming，OOP）是一种程序设计范性，同时也是一种程序开发方法。它将对象作为程序的基本单元，将程序和数据封装其中，以提代码的重用性、灵活性和可扩展性。
面向对象的核心思想是对象、封装、可重用和可扩展性。
面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想（面向过程）刚好相反：传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。
通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式。
类是对象的抽象组织，对象是类的具体存在。
PHP对象的本质 先看PHP5中变量的定义：
#zend/zend.h typedef union _zvalue_value { long lval; //整形 double dval; //浮点数 struct { char *val; int len; } str; //字符串 HashTable *ht; //数组 zend_object_value obj; //对象 } zvalue_value; struct _zval_struct { /* Variable information */ zvalue_value value;	/* value */ zend_uint refcount__gc; zend_uchar type;	/* active type */ zend_uchar is_ref__gc; };  从源码可知php对象的类型是zend_object_value，接下来看它是如何实现的：
#zend/zend.h typedef struct _zend_object { zend_class_entry *ce; //类指针，指向对象对应的类 HashTable *properties; //存放对象的属性表 HashTable *guards; /* protects from __get/__set .</description>
    </item>
    
  </channel>
</rss>