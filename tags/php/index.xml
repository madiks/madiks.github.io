<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Madiks&#39;s blog</title>
    <link>https://madiks.github.io/tags/php/</link>
    <description>Recent content in Php on Madiks&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved.&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Wed, 27 Sep 2017 21:22:14 +0800</lastBuildDate>
    
	<atom:link href="https://madiks.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从零搭建LNMP开发环境</title>
      <link>https://madiks.github.io/post/build-vagrant-lnmp-sde/</link>
      <pubDate>Wed, 27 Sep 2017 21:22:14 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/build-vagrant-lnmp-sde/</guid>
      <description>在Mac从零搭建PHP7开发环境，由于我不想直接在本地环境下直接操作所以使用Vagrant+VirtualBox在虚拟机来搭建开发环境，这样可以不用考虑开发环境各种配置对于本机的影响。
关于Vagrant可以参考这两篇文章：为什么要使用Vagrant和Vagrant使用简介我就不多做解释了。
如果你不想自己手动搭建整个环境可以直接使用Laravel Homestead，这是由Laravel框架开发者提供的一个已搭建好的跨平台（Windows、 Mac、 Linux）的PHP开发环境，内置了如Nginx、PHP7、 MySQL、 Postgres、 Redis、 Memcached、 Node等服务，只需在Vagrant下载入box文件做到了开箱即用。
绕了半天还是回归正题，从零搭建PHP7开发环境：
初始化虚拟环境 这里假设你已经在本机安装好了VirtualBox+Vagrant，进入自己的想要存放环境的目录并在终端下执行如下命令：
mkdir trusty64 &amp;amp;&amp;amp; cd trusty64 # 创建并进入存放虚拟机的目录 vagrant init ubuntu/trusty64 # 使用Vagrant载入Ubuntu 14.04的box文件  上面的命令会从外网下载Ubuntu 14.04的box文件，所以会比较慢，需要耐心等待。执行成功后编辑trusty64目录下的Vagrantfile配置文件来修改一些虚拟机的配置。
由于网络原因box文件的下载可能出错，所以我这里提供我已下载的Vagrant Ubuntu 14.04 Box文件给大家，可以直接在trusty64目录下使用如下命令载入:
vagrant box add phpdev ubuntu-trusty64-20170831.box vagrant init  调整虚拟机配置 我习惯将配置文件中config.vm.box_check_update = true修改为config.vm.box_check_update = false，这样每次启动虚拟机就不会检查box文件是否有更新了。
Vagrant 默认是使用端口映射方式将虚拟机的端口映射本地从而实现类似 http://localhost:80 这种访问方式，我更喜欢以固定IP的方式访问虚拟机，修改配置：
config.vm.network :private_network, ip: &amp;quot;192.168.99.64&amp;quot;  这样启动虚拟机后我们就能用 192.168.99.64 访问这台机器了，你可以把IP改成其他地址，只要冲突就行。
默认Vagrant是把当前目录即trusty64映射到虚拟机的/vagrant目录下，你可以改变这个配置：
config.vm.synced_folder &#39;.&#39;, &#39;/vagrant&#39;, disabled: true config.vm.synced_folder &amp;quot;./PHPCode&amp;quot; , &amp;quot;/code&amp;quot;, :mount_options =&amp;gt; [&amp;quot;dmode=777&amp;quot;, &amp;quot;fmode=666&amp;quot;]  上面第一行关闭默认的目录映射，第二行将当前目录下的PHPCode映射到虚拟机的/code目录下。</description>
    </item>
    
    <item>
      <title>记一次奇葩的面试经历</title>
      <link>https://madiks.github.io/post/a-bizarre-job-interview/</link>
      <pubDate>Thu, 07 Sep 2017 16:30:23 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/a-bizarre-job-interview/</guid>
      <description>今天下午去某公司面试PHP岗位，经历比较奇葩，现将经历记录如下：
前天下午这家公司hr给我打电话说你通过了我们的简历筛选，问我什么时候有空过去面试，于是就约了后天下午两点半的面试。
今天下午两点二十我到了该公司，先从前台那领到了一张需要填写个人信息的表格，找了个地开始填表。把这张表摆在桌面上细一瞧，好家伙各种项目是列的事无巨细。从个人姓名、性别、身份证号、出生年月、籍贯、民族、政治面貌到手机号、邮箱、QQ号码、备用联系人、教育经历、获奖情况、工作年限、工作经历、上一份工作薪酬、薪酬证明人联系方式再到家庭成员关心、你爸你妈叫啥、父母年龄和工作等等信息。我自己都有点搞不清楚自己是来应聘后端程序员还是来参加政府的公务员考试的，好不容易花十多分钟填好交上去，然后等着面试。
我没带简历，得等hr打出简历来才能继续面试。等了大概二十来分钟，hr带着简历来了，面试开始，我跟hr的对话如下：
 hr：不好意思让您久等了，咱们开始吧。 我：好。 hr：你是陕西人？ 我：对，陕西·西安的。 hr：工作三年了？ 我：对，14年毕业的，刚好工作三年多。 hr：上份工作是校招还是社招的？ 我：我在外地上的大学，毕业以后来北京自己找的工作。 hr：那介绍一下你的项目经历吧。 我：咱这是开始技术面试了吗？ hr：没有，现在是hr面。 我：哦，开始介绍项目经历，此处省略许多字。 hr：都用过什么PHP框架？ 我：上架公司的项目用的是zend framework还有不用框架的项目，我自己还用过CI和laravel。 hr：没用过TP？ 我：没用过，但是我感觉框架很快就能掌握所以没用过并不是问题。 hr：……，那你上家公司项目都用什么数据库？ 我：Oracle，因为性能较好，能满足我们公司的业务量，后端业务逻辑不用太复杂。 hr：你们没用MySQL？ 我：（尴尬），没用，不过我对MySQL也有一些了解。 hr：那你有做管理系统和电商系统的经验吗？ 我：管理系统有，电商系统暂时没接触过。 hr：……，介绍一下这个项目（指着简历一个项目）。 我：这是我单独负责的一个爬虫项目，当时老大要抓取几个不同网站上的数据。我使用python Scrapy爬虫框架写的，抓取网页数据、整理、过滤、入库，另外的前端展示系统由其他同事负责，这项目其实比较简单。 hr：python写的（简历上写的python实现）？ 我：对，是用python写的。 hr：（少做停顿），我大概了解了你的情况。我们们公司在薪酬方面还是还是不错的，只要技术能力够薪资可以给到很高。 我：（点头）。 hr：现在我们公司PHP这边要招两个初级和一个高级职位，部分后端改java了，所以PHP的职位数量有些压缩。 我：……（不详的预感）。 hr：高级PHP岗位是要求能独立设计项目，还要带小团队做需求。你这边三年经验虽然也能满足，但是我觉得你没有电商项目相关经验，可能不适合我们。所以不好意思，麻烦你跑一趟，祝你找到更好的公司。 我：…… 我：…… 我：……，那好，再见。  整个过程不到二十分钟，还没我这等面试的时间久。连对方技术的面都没见着，我就被hr否了，感觉mmp。来回折腾三小时，您这是通知我过来现场筛选简历吧，越想越生气。我就给hr回了邮件：
 希望你们写好招聘要求，做好简历筛选。技术都没面，被hr以工作经验不符拒绝，我大热天白跑一趟真的很烦。
 本来一肚子火，我在写邮件时还是保持了相当的克制。冷静下来觉得今天碰到这事有些搞笑，写点东西记录下来吧。</description>
    </item>
    
    <item>
      <title>PHP面向对象笔记</title>
      <link>https://madiks.github.io/post/php-oop-note/</link>
      <pubDate>Mon, 23 May 2016 20:12:23 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-oop-note/</guid>
      <description>Introduction 阅读《PHP核心技术与最佳实践》对PHP面向对象相关知识的总结、整理与记录。
面向对象 OOP 面向对象程序设计（Object-Oriented Programming，OOP）是一种程序设计范性，同时也是一种程序开发方法。它将对象作为程序的基本单元，将程序和数据封装其中，以提代码的重用性、灵活性和可扩展性。
面向对象的核心思想是对象、封装、可重用和可扩展性。
面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想（面向过程）刚好相反：传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。
通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式。
类是对象的抽象组织，对象是类的具体存在。
PHP对象的本质 先看PHP5中变量的定义：
#zend/zend.h typedef union _zvalue_value { long lval; //整形 double dval; //浮点数 struct { char *val; int len; } str; //字符串 HashTable *ht; //数组 zend_object_value obj; //对象 } zvalue_value; struct _zval_struct { /* Variable information */ zvalue_value value;	/* value */ zend_uint refcount__gc; zend_uchar type;	/* active type */ zend_uchar is_ref__gc; };  从源码可知php对象的类型是zend_object_value，接下来看它是如何实现的：
#zend/zend.h typedef struct _zend_object { zend_class_entry *ce; //类指针，指向对象对应的类 HashTable *properties; //存放对象的属性表 HashTable *guards; /* protects from __get/__set .</description>
    </item>
    
    <item>
      <title>php自定义Warning的输出信息</title>
      <link>https://madiks.github.io/post/php-custom-warning-message/</link>
      <pubDate>Tue, 30 Dec 2014 21:10:40 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-custom-warning-message/</guid>
      <description>php自定义Warning的输出信息 前几天公司平台接入了新的合作商，数据抓取服务一直没问题，到今天有一本书一直报错，查看log发现Warning,出错是由于导致xml解析错误。想到输出一下具体的bookid和chapter_id来查看到底是哪本书哪个章节的问题。
直接想到的方案是try catch在出错的时候输出bookid和chapter_id,但是发现php try catch无法处理Warning错误，于是Google了php如何catch warning，在stackoverflow上找到了如下方法： http://stackoverflow.com/questions/1241728/can-i-try-catch-a-warning
大致是通过 set_error_handler来自定义处理Warning的方法，在其中抛出一个异常然后再try catch它输出bookid和chapter_id，基本照抄给的实例于是如下的代码：
set_error_handler(function($errno, $errstr, $errfile, $errline, array $errcontext) { // error was suppressed with the @-operator if (0 === error_reporting()) { return false; } throw new ErrorException($errstr, 0, $errno, $errfile, $errline); }, E_WARNING); try{ $chapter_content = simplexml_load_string($chaptercontent_xml); } catch (Exception $e) { echo &amp;quot;Caught exception: bookid = $id , chapter_id = $chapter_id &amp;quot;, $e-&amp;gt;getMessage(), &amp;quot;\n&amp;quot;; exit(); } restore_error_handler();  解释：使用set_error_handler来接管warning的处理，在其回调函数中抛出一个Exception,然后就可以try catch了，最后调用restore_error_handler();来撤销你设置的error_handler从而使其不影响后续的代码。</description>
    </item>
    
  </channel>
</rss>