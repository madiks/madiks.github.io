<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on Madiks&#39;s blog</title>
    <link>https://madiks.github.io/categories/php/</link>
    <description>Recent content in Php on Madiks&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>All rights reserved.&lt;br&gt;Powered by [Hugo](//gohugo.io/) with the [Type Theme](//github.com/digitalcraftsman/hugo-type-theme)</copyright>
    <lastBuildDate>Wed, 27 Sep 2017 21:22:14 +0800</lastBuildDate>
    
	<atom:link href="https://madiks.github.io/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从零搭建LNMP开发环境</title>
      <link>https://madiks.github.io/post/build-vagrant-lnmp-sde/</link>
      <pubDate>Wed, 27 Sep 2017 21:22:14 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/build-vagrant-lnmp-sde/</guid>
      <description>在Mac从零搭建PHP7开发环境，由于我不想直接在本地环境下直接操作所以使用Vagrant+VirtualBox在虚拟机来搭建开发环境，这样可以不用考虑开发环境各种配置对于本机的影响。
关于Vagrant可以参考这两篇文章：为什么要使用Vagrant和Vagrant使用简介我就不多做解释了。
如果你不想自己手动搭建整个环境可以直接使用Laravel Homestead，这是由Laravel框架开发者提供的一个已搭建好的跨平台（Windows、 Mac、 Linux）的PHP开发环境，内置了如Nginx、PHP7、 MySQL、 Postgres、 Redis、 Memcached、 Node等服务，只需在Vagrant下载入box文件做到了开箱即用。
绕了半天还是回归正题，从零搭建PHP7开发环境：
初始化虚拟环境 这里假设你已经在本机安装好了VirtualBox+Vagrant，进入自己的想要存放环境的目录并在终端下执行如下命令：
mkdir trusty64 &amp;amp;&amp;amp; cd trusty64 # 创建并进入存放虚拟机的目录 vagrant init ubuntu/trusty64 # 使用Vagrant载入Ubuntu 14.04的box文件  上面的命令会从外网下载Ubuntu 14.04的box文件，所以会比较慢，需要耐心等待。执行成功后编辑trusty64目录下的Vagrantfile配置文件来修改一些虚拟机的配置。
由于网络原因box文件的下载可能出错，所以我这里提供我已下载的Vagrant Ubuntu 14.04 Box文件给大家，可以直接在trusty64目录下使用如下命令载入:
vagrant box add phpdev ubuntu-trusty64-20170831.box vagrant init  调整虚拟机配置 我习惯将配置文件中config.vm.box_check_update = true修改为config.vm.box_check_update = false，这样每次启动虚拟机就不会检查box文件是否有更新了。
Vagrant 默认是使用端口映射方式将虚拟机的端口映射本地从而实现类似 http://localhost:80 这种访问方式，我更喜欢以固定IP的方式访问虚拟机，修改配置：
config.vm.network :private_network, ip: &amp;quot;192.168.99.64&amp;quot;  这样启动虚拟机后我们就能用 192.168.99.64 访问这台机器了，你可以把IP改成其他地址，只要冲突就行。
默认Vagrant是把当前目录即trusty64映射到虚拟机的/vagrant目录下，你可以改变这个配置：
config.vm.synced_folder &#39;.&#39;, &#39;/vagrant&#39;, disabled: true config.vm.synced_folder &amp;quot;./PHPCode&amp;quot; , &amp;quot;/code&amp;quot;, :mount_options =&amp;gt; [&amp;quot;dmode=777&amp;quot;, &amp;quot;fmode=666&amp;quot;]  上面第一行关闭默认的目录映射，第二行将当前目录下的PHPCode映射到虚拟机的/code目录下。</description>
    </item>
    
    <item>
      <title>PHP面向对象笔记</title>
      <link>https://madiks.github.io/post/php-oop-note/</link>
      <pubDate>Mon, 23 May 2016 20:12:23 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-oop-note/</guid>
      <description>Introduction 阅读《PHP核心技术与最佳实践》对PHP面向对象相关知识的总结、整理与记录。
面向对象 OOP 面向对象程序设计（Object-Oriented Programming，OOP）是一种程序设计范性，同时也是一种程序开发方法。它将对象作为程序的基本单元，将程序和数据封装其中，以提代码的重用性、灵活性和可扩展性。
面向对象的核心思想是对象、封装、可重用和可扩展性。
面向对象程序设计可以看作一种在程序中包含各种独立而又互相调用的对象的思想，这与传统的思想（面向过程）刚好相反：传统的程序设计主张将程序看作一系列函数的集合，或者直接就是一系列对电脑下达的指令。面向对象程序设计中的每一个对象都应该能够接受数据、处理数据并将数据传达给其它对象，因此它们都可以被看作一个小型的“机器”，即对象。目前已经被证实的是，面向对象程序设计推广了程序的灵活性和可维护性，并且在大型项目设计中广为应用。
通常，OOP被理解为一种将程序分解为封装数据及相关操作的模块而进行的编程方式。
类是对象的抽象组织，对象是类的具体存在。
PHP对象的本质 先看PHP5中变量的定义：
#zend/zend.h typedef union _zvalue_value { long lval; //整形 double dval; //浮点数 struct { char *val; int len; } str; //字符串 HashTable *ht; //数组 zend_object_value obj; //对象 } zvalue_value; struct _zval_struct { /* Variable information */ zvalue_value value;	/* value */ zend_uint refcount__gc; zend_uchar type;	/* active type */ zend_uchar is_ref__gc; };  从源码可知php对象的类型是zend_object_value，接下来看它是如何实现的：
#zend/zend.h typedef struct _zend_object { zend_class_entry *ce; //类指针，指向对象对应的类 HashTable *properties; //存放对象的属性表 HashTable *guards; /* protects from __get/__set .</description>
    </item>
    
    <item>
      <title>php自定义Warning的输出信息</title>
      <link>https://madiks.github.io/post/php-custom-warning-message/</link>
      <pubDate>Tue, 30 Dec 2014 21:10:40 +0800</pubDate>
      
      <guid>https://madiks.github.io/post/php-custom-warning-message/</guid>
      <description>php自定义Warning的输出信息 前几天公司平台接入了新的合作商，数据抓取服务一直没问题，到今天有一本书一直报错，查看log发现Warning,出错是由于导致xml解析错误。想到输出一下具体的bookid和chapter_id来查看到底是哪本书哪个章节的问题。
直接想到的方案是try catch在出错的时候输出bookid和chapter_id,但是发现php try catch无法处理Warning错误，于是Google了php如何catch warning，在stackoverflow上找到了如下方法： http://stackoverflow.com/questions/1241728/can-i-try-catch-a-warning
大致是通过 set_error_handler来自定义处理Warning的方法，在其中抛出一个异常然后再try catch它输出bookid和chapter_id，基本照抄给的实例于是如下的代码：
set_error_handler(function($errno, $errstr, $errfile, $errline, array $errcontext) { // error was suppressed with the @-operator if (0 === error_reporting()) { return false; } throw new ErrorException($errstr, 0, $errno, $errfile, $errline); }, E_WARNING); try{ $chapter_content = simplexml_load_string($chaptercontent_xml); } catch (Exception $e) { echo &amp;quot;Caught exception: bookid = $id , chapter_id = $chapter_id &amp;quot;, $e-&amp;gt;getMessage(), &amp;quot;\n&amp;quot;; exit(); } restore_error_handler();  解释：使用set_error_handler来接管warning的处理，在其回调函数中抛出一个Exception,然后就可以try catch了，最后调用restore_error_handler();来撤销你设置的error_handler从而使其不影响后续的代码。</description>
    </item>
    
  </channel>
</rss>